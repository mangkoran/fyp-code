---
sources:
  input_syslog:
    type: syslog
    address: 0.0.0.0:9000
    mode: tcp

  input_vector:
    type: vector
    address: 0.0.0.0:6000

  input_host_metrics:
    type: host_metrics

  input_prometheus_scrape_opnsense:
    type: prometheus_scrape
    instance_tag: "instance"
    endpoints:
    - http://10.10.1.1:9090/metrics

enrichment_tables:
  table_geoip:
    path: /etc/vector/GeoLite2-City.mmdb
    type: geoip

transforms:
  route_host:
    type: route
    inputs:
    - input_syslog
    - input_vector
    route:
      opnsense: '.host == "opnsense1.home.arpa"'
      pihole: '.host == "pihole1"'

  label_opnsense_rename:
    type: remap
    inputs:
    - route_host.opnsense
    source: |-
      .host = "opnsense1"

  route_opnsense_appname:
    type: route
    inputs:
    - label_opnsense_rename
    route:
      filterlog: '.appname == "filterlog"'
      suricata: '.appname == "suricata"'

  route_pihole_appname:
    type: route
    inputs:
    - route_host.pihole
    route:
      pihole: '.appname == "pihole"'

  label_opnsense_filterlog:
    type: remap
    inputs:
    - route_opnsense_appname.filterlog
    source: |-
      message_array = parse_csv!(string!(.message))
      # ipv4 and ipv6
      if message_array[8] == "4" || message_array[8] == "6" {
        .filter_iface   = message_array[4]
        .filter_action  = message_array[6]
        .filter_dir     = message_array[7]
        .filter_ipver   = message_array[8]
        # ipv4
        if message_array[8] == "4" {
          .filter_proto   = message_array[16]
          # .filter_flags   = message_array[23]
          .filter_srcip   = message_array[18]
          .filter_srcport = message_array[20]
          .filter_dstip   = message_array[19]
          .filter_dstport = message_array[21]
        # ipv6
        } else if message_array[8] == "6" {
          .filter_proto   = message_array[12]
          .filter_srcip   = message_array[15]
          .filter_srcport = message_array[17]
          .filter_dstip   = message_array[16]
          .filter_dstport = message_array[18]
        }
      }

  label_opnsense_suricata:
    type: remap
    inputs:
    - route_opnsense_appname.suricata
    source: |-
      .message = parse_json!(.message, max_depth: 4)
      # .action = .message.alert.action
      # .category = .message.alert.category
      # .severity = .message.alert.severity
      # .signature = .message.alert.signature

  label_pihole:
    type: remap
    inputs:
    - route_pihole_appname.pihole
    source: |-
      message_array = compact(parse_csv!(string!(.message), delimiter: " "), string: true)
      if message_array[7] == "blocked" || message_array[7] == "blacklisted" {
        .block_reason  = message_array[7]
        .block_list    = message_array[6]
        .block_src     = parse_csv!(message_array[5], delimiter: "/")
        .block_srcip   = .block_src[0]
        .block_srcport = .block_src[1]
        .block_domain  = message_array[8]
        .block_ansaddr = message_array[10]
      }

  split_pihole:
    type: route
    inputs:
    - label_pihole
    route:
      block: '.block_reason == "blocked" || .block_reason == "blacklisted"'
      # other: '.block_reason != "blocked" && .block_reason != "blacklisted"'

  geotag_opnsense_filterlog:
    type: remap
    inputs:
    # - "split_opnsense_filterlog.pass"
    - label_opnsense_filterlog
    source: |-
      .src_geoip = get_enrichment_table_record("table_geoip", {
          "ip": .filter_srcip
        }
      ) ?? null
      .dst_geoip = get_enrichment_table_record("table_geoip", {
          "ip": .filter_dstip
        }
      ) ?? null

  label_host_metrics:
    type: remap
    inputs:
    - input_host_metrics
    source: |-
      .tags.host = "monitoring1"

  label_prometheus_scrape_opnsense:
    type: remap
    inputs:
    - input_prometheus_scrape_opnsense
    source: |-
      .tags.host = "opnsense1"

sinks:
  monitoring_loki:
    type: loki
    inputs:
    - geotag_opnsense_filterlog
    - split_pihole.block
    - label_opnsense_suricata
    encoding:
      codec: json
    endpoint: http://0.0.0.0:3100
    labels:
      source: vector

  monitoring_mimir:
    type: prometheus_remote_write
    inputs:
    - label_host_metrics
    - label_prometheus_scrape_opnsense
    endpoint: http://0.0.0.0:3101/api/v1/push # https://grafana.com/docs/mimir/latest/references/http-api/#remote-write
