sources:
  input_syslog:
    type: syslog
    address: 0.0.0.0:9000
    mode: tcp

  input_vector:
    type: vector
    address: 0.0.0.0:6000

  input_host_metrics:
    type: host_metrics

enrichment_tables:
  table_geoip:
    path: /etc/vector/GeoLite2-City.mmdb
    type: geoip

transforms:
  split_syslog_host:
    type: route
    inputs:
    - input_syslog
    route:
      opnsense: '.host == "OPNsense.localdomain"'
      # pihole: '.host == "pihole1"'

  label_opnsense_filterlog:
    type: remap
    inputs:
    - split_syslog_host.opnsense
    source: |-
      if .appname == "filterlog" {
        message_array = parse_csv!(string!(.message))
        # ipv4 and ipv6
        if message_array[8] == "4" || message_array[8] == "6" {
          .filter_iface   = message_array[4]
          .filter_action  = message_array[6]
          .filter_dir     = message_array[7]
          .filter_ipver   = message_array[8]
          # ipv4
          if message_array[8] == "4" {
            .filter_proto   = message_array[16]
            # .filter_flags   = message_array[23]
            .filter_srcip   = message_array[18]
            .filter_srcport = message_array[20]
            .filter_dstip   = message_array[19]
            .filter_dstport = message_array[21]
          # ipv6
          } else if message_array[8] == "6" {
            .filter_proto   = message_array[12]
            .filter_srcip   = message_array[15]
            .filter_srcport = message_array[17]
            .filter_dstip   = message_array[16]
            .filter_dstport = message_array[18]
          }
        }
      }

  label_pihole:
    type: remap
    inputs:
    - input_vector
    source: |-
      if .service.name == "pihole" {
        message_array = compact(parse_csv!(string!(.message), delimiter: " "), string: true)
        if message_array[7] == "blocked" || message_array[7] == "blacklisted" {
          .block_reason  = message_array[7]
          .block_list    = message_array[6]
          .block_src     = parse_csv!(message_array[5], delimiter: "/")
          .block_srcip   = .block_src[0]
          .block_srcport = .block_src[1]
          .block_domain  = message_array[8]
          .block_ansaddr = message_array[10]
        }
      }

# {
#   "container": {
#     "name": "pihole-1"
#   },
#   "file": "/var/log/pihole/pihole.log",
#   "host": {
#     "name": "pihole1"
#   },
#   "message": "Jul  5 18:12:04 dnsmasq[265]: 152621 10.10.1.3/12472 query[A] sgbookla02.maxis.com.my from 10.10.1.3",
#   "service": {
#     "name": "pihole"
#   },
#   "source_type": "file",
#   "timestamp": "2023-07-05T10:12:05.601020182Z"
# }

  # split_opnsense_filterlog:
  #   type: "route"
  #   inputs:
  #   - label_opnsense_filterlog
  #   route:
  #     pass: '.filter_action == "pass"'
  #     # other: '.filter_action != "pass"'

  split_pihole:
    type: route
    inputs:
    - label_pihole
    route:
      block: '.block_reason == "blocked" || .block_reason == "blacklisted"'
      # other: '.block_reason != "blocked" && .block_reason != "blacklisted"'

  geotag_opnsense_filterlog:
    type: remap
    inputs:
    # - "split_opnsense_filterlog.pass"
    - label_opnsense_filterlog
    source: |-
      .src_geoip = get_enrichment_table_record("table_geoip",
        {
          "ip": .filter_srcip
        }
      ) ?? null
      .dst_geoip = get_enrichment_table_record("table_geoip",
        {
          "ip": .filter_dstip
        }
      ) ?? null

sinks:
  # monitoring_loki:
  #   type: loki
  #   inputs:
  #   - geotag_opnsense_filterlog
  #   - split_pihole.block
  #   encoding:
  #     codec: json
  #   endpoint: http://0.0.0.0:3100
  #   labels:
  #     source: vector

  debug_console:
    type: console
    encoding:
      codec: json
    inputs:
    - geotag_opnsense_filterlog
    - split_pihole.block
    # - input_vector
